# config.py
import os

class Config:
    # üîê Cl√© secr√®te : obligatoire en production
    SECRET_KEY = os.environ.get("SECRET_KEY")
    if not SECRET_KEY:
        raise RuntimeError("SECRET_KEY is not set. Define it in environment variables.")

    # üõ¢Ô∏è URL de la base de donn√©es
    DATABASE_URL = (
        os.environ.get("DATABASE_URL") or
        os.environ.get("POSTGRES_URL") or
        os.environ.get("POSTGRESQL_URL")
    )

    # üõ†Ô∏è Fallback en local uniquement (SQLite)
    if not DATABASE_URL:
        DATABASE_URL = "sqlite:///local.db"
        print("‚ö†Ô∏è Using SQLite for local development. Set DATABASE_URL in production.")

    # üîó Remplacer postgres:// ou postgresql:// par postgresql+pg8000://
    if DATABASE_URL.startswith("postgres://"):
        DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql+pg8000://", 1)
    elif DATABASE_URL.startswith("postgresql://"):
        DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+pg8000://", 1)

    # üì¶ Configuration Flask-SQLAlchemy
    SQLALCHEMY_DATABASE_URI = DATABASE_URL
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # ‚öôÔ∏è Options pour la stabilit√© (pooling + SSL pour Supabase)
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_pre_ping': True,           # V√©rifie la connexion avant chaque requ√™te
        'pool_recycle': 300,             # Recr√©e les connexions toutes les 5 min
        'connect_args': {
            'ssl_context': True          # üîê Obligatoire pour Supabase
        } if 'supabase.co' in DATABASE_URL else {}
    }